FORMAT: 1A
HOST: https://api.tipfortip.com

# Tip for Tip API

Services all the data necessary for T4T client applicatinos.

- All requests that require a current user will return `401` if no user is [authenticated](#authentication).



# Group Authentication
Use Facebook as a user authentication/creation portal.

## GET /auth/facebook
Authenticate via Facebook. Starts the handshake process for the client with Facebook Oauth.
In the end, a user is redirected back to `/profile` unless a `redirectTo` param is provided.

- If the user does not yet have an account, one is created for them.
- If the user has an account but is not yet authenticated, they are logged in and their profile data is synced with their Facebook data.
- If the user has an account and is already authenticated, their profile data is synced with their Facebook data.
- If the user has an account by email but has not yet used this provider for authentication, TODO
- If a `redirectTo` param is provided, successful authentication redirects to this url.

+ Response 304


## GET /auth/logout
Logout. Clears the user's session and auth tokens.

+ Response 200




# Group Users
User related resources.

## GET /profile
Retrieve the current user's user, identity, and profile data.

+ Response 200 (application/json)

    + Body

            {
                id: 1,
                username: "1762fe11",
                first_name: "Bruce",
                last_name: "Chelmsford,
                email: "bruce@example.com",
                uuid: "1762fe10",
                timezone: -7,
                locale: "en_US",
                updated_at: "2014-04-27T18:45:23.000Z",
                identities: [
                    {
                        uid: "12345",
                        provider: "facebook",
                        token: "abcdefg12345",
                        token_expires_at: "2014-07-24T22:13:45.000-07:00"
                    }
                ]

            }

+ Response 401 (application/json)

    + Body

            {
                "status":"unauthorized"
            }




# Group Tips

## POST /:noun_type/:noun_id?/tips

- Requires a current user

Amos, FYI: https://github.com/apiaryio/api-blueprint/issues/86

Create a tip for a noun. If a noun id is provided, the noun will be looked up, but otherwise one will be created. The current user will be assigned as the tipper. If the noun has not yet had a tip, the user will be set as the first tipper.

Examples:

- `POST places/tips` - Creates a place and a tip based on the provided params.
- `POST places/123-abc/tips` - Finds the place with the id `123-abc` and creates a tip based on the provided params.
- `POST things/tips` - Creates a thing and a tip based on the provided params.

+ Parameters

    + noun_type (string)               ... The type of noun the created tip will be created for. May be one of the available noun types.
    + noun_id   (optional, string)     ... The id of the noun to create the tip for. This parameter is optional. If left out, the other provided noun attributes will be used to find or create the noun.
    + is_anonymous (optional, boolean) ... If true, the tip will be displayed without revealing the identity of the tipper. Default: false
    + can_purchase_with_reputation (optional, boolean) ... If true, the readers of the tip can purchase it using reputation points. Default: false

+ Request (application/json)

        {
            nounType: "place",
            is_anonymous: false,
            can_purchase_with_reputation: true
        }

+ Response 201 (application/json)

        {
            "id": "1163ef90-cddf-11e3-9f6d-85ee8d939f6f",
            "noun_id": "012052b12982-1762fe10-ce3c-11e3-88f1"
        }

+ Response 401 (application/json)

        If there is no currently authenticated user.

+ Response 404 (application/json)

        If a noun id was provided but was not found.

## GET /tips?q=<search>

Search for tips based on the search query.

- Returns tips in order of reputation

+ Response 200 (application/json)

    + Body

            {
                TODO
            }







# Group Nouns

## GET /nouns/places/:place_id
Get a place by its id.

The associated data returned includes limited perk and tip data, paginated when
necessary.

<!--
    creates the place if not found
    returns place data
    returns list of perks
    recent tips (paginated, first page)
    list of subscriptions/perks
-->
<!--
Questions:
    paginate perks?

Todos:
    paginate tips
-->

+ Response 200

    + Body

            {
                "id":7,
                "uuid":"6d085313e43a9d420999faaf87a83be9",
                "name":"Starbucks",
                "latitude":-36.4234,
                "longitude":-88.5432,
                "created_at":"2014-05-19T02:00:04.000-07:00",
                "updated_at":"2014-05-19T02:00:04.000-07:00",

                "perks_count":1,
                "perks": [

                ],

                "tips_count":3,
                "tips": [

                ]
            }


## GET /nouns/places/foursquare/:foursquare_id
Get a place by its Foursquare id. The data returned is the T4T data on the place,
not necessarily the Foursquare data. The response body is the same as the
`GET /nouns/places/:place_id` request.

A key difference is that if a place is requested using foursquare id but is not
found locally, a record is created for it.

+ Response 200

    + Body

            {
                "id":7,
                "uuid":"6d085313e43a9d420999faaf87a83be9",
                "name":"Starbucks",
                "latitude":-36.4234,
                "longitude":-88.5432,
                "created_at":"2014-05-19T02:00:04.000-07:00",
                "updated_at":"2014-05-19T02:00:04.000-07:00",

                "perks_count":1,
                "perks": [
                    <!-- todo -->
                ],

                "tips_count":3,
                "tips": [
                    <!-- todo -->
                ]
            }


# Group Subscriptions and Partners

## Subscription [/subscriptions/:subscription_id]

A single subscription object.

+ Parameters
    + subscription_id (string or integer) ... Id or uuid of the subscription.

### Retrieve a Single Subscription [GET]

Retrieve a subscription's set of data. Includes the subscription's associated
noun, perks, and partnership.
 
<!--
Questions:
    paginate perks?
    how much noun data to provide?
    how much partner data to privide
-->

Expected Responses: 

- `200 OK` If the subscription was found.
- `404 Not Found` If the subscription cannot be found using the provided id.

+ Response 200

    + Body

            {
                "id": 33,
                "guid": "967d563aac9f9ba7d1de3a22e4a10d36",
                "noun": {
                    "id": 7,
                    "guid": "6d085313e43a9d420999faaf87a83be9",
                    "type": "place",
                    "name": "Starbucks",
                    "created_at":"2014-05-19T02:00:04.000-07:00",
                    "updated_at":"2014-05-19T02:00:04.000-07:00"
                },
                "partner": {
                    "id": 88,
                    "guid": "axd85313e43a9d330999faaf87a3dbe9",
                    "primary_user_id": 55,

                    <!-- todo -->

                    "created_at":"2014-05-19T02:00:04.000-07:00",
                    "updated_at":"2014-05-19T02:00:04.000-07:00"
                }
                "perks": [
                    {
                        "id": 99,
                        "title": "Free cup of coffee!",
                        "created_at":"2014-05-19T02:00:04.000-07:00",
                        "updated_at":"2014-05-19T02:00:04.000-07:00"
                    }
                ]
            }

+ Response 404

    
# Group Perks

## Perk [/subscriptions/:perk_id]

A single perk object. Perks are readable by any user, but are only editable or 
removable by a user with permissions to manage a partner/subscription's perks.

+ Parameters
    + perk_id (string or integer) ... Id or uuid of the perk.
    
+ Model (application/json)

    JSON representation of Perk resource. 

    + Body

            {
                "id": 99,
                "title": "Free cup of coffee!",
                "subscription_id": 33,
                "partner": {
                    "id": 88,
                    "guid": "axd85313e43a9d330999faaf87a3dbe9",
                    "primary_user_id": 55,

                    <!-- todo -->

                    "created_at":"2014-05-19T02:00:04.000-07:00",
                    "updated_at":"2014-05-19T02:00:04.000-07:00"
                }
                "created_at":"2014-05-19T02:00:04.000-07:00",
                "updated_at":"2014-05-19T02:00:04.000-07:00"
            }

### Retrieve a Single Perk [GET]

Retreive information about a single perk. 

Expected responses:

- `200 OK` if the resource was found.
- `404 Not Found` if the resource was not found.

+ Response 200 
    [Perk][]
+ Response 404 
    
## Edit a Perk [PATCH]

Any single attributes can be sent or ommitted only the attributes sent 
will be updated.

Expected responses:

- `200 OK` if the resource was found.
- `401 Unauthorized` if the current user is not the primary user on the partnership owning
    the perk or in any other way does not have a role with permission to
    update the partnership's perks.
- `404 Not Found` if the resource was not found.
- `422 Unprocessible Entity` if any provided attribute values are invalid. Structured errors will be
    provided in the response body.

+ Request (application/json)

        {
            title: "2 Free cups of coffee!"
        }

+ Response 200 
    [Perk][]
+ Response 404 
+ Response 422 
    
    + Body

            {
                "errors": [
                    {
                        "resource": "Perk",
                        "resource_id": 99,
                        "parameter": "title",
                        "message": "is invalid.",
                        "code": "invalid"
                    }
                ]
            }

+ Response 401

### Remove a Perk [DELETE]
Remove a perk.

Expected Responses:

- `204 No Content` if the resource was successfully removed.
- `401 Unauthorized` if the current user is not the primary user on the partnership owning
    the perk or in any other way does not have a role with permission to
    update the partnership's perks.
- `404 Not Found` if the resource was not found.

+ Response 204
+ Response 401
+ Response 404
    

## Perks Collection [/subscription/:subscription_id/perks]
Collection of all perks in the specified subscription.

### List All Perks [GET]

+ Response 200
+ Response 404

## Create a Perk [POST]
Create a perk. Perks must be added to a subscription, and so they are RESTfully
nested within the subscription namespace. The successful response body provides
the same body as the `GET /perks/:perk_id` request.

+ Request (application/json)

        {
            title: "2 Free cups of coffee!"
        }

+ Response 201 Created

    + Body

            {
                "id": 99,
                "title": "Free cup of coffee!",
                "subscription_id": 33,
                "partner": {
                    "id": 88,
                    "guid": "axd85313e43a9d330999faaf87a3dbe9",
                    "primary_user_id": 55,

                    <!-- todo -->

                    "created_at":"2014-05-19T02:00:04.000-07:00",
                    "updated_at":"2014-05-19T02:00:04.000-07:00"
                }
                "created_at":"2014-05-19T02:00:04.000-07:00",
                "updated_at":"2014-05-19T02:00:04.000-07:00"
            }

+ Response 404 Not Found
    If the subscription cannot be found using the provided id.

+ Response 422 Unprocessible Entity
    If any provided attribute values are invalid. Structured errors will be
    provided in the response body.

    + Body

            {
                "errors": [
                    {
                        "resource": "Perk",
                        "resource_id": 99,
                        "parameter": "title",
                        "message": "is invalid.",
                        "code": "invalid"
                    }
                ]
            }

+ Response 401 Unauthorized
    If the current user is not the primary user on the partnership owning
    the subscription or in any other way does not have a role with permission to
    update the partnership's perks.






# Group Foursquare

Provides a proxy for the Foursquare API, attaching the appropriate api keys
as authorization. Responses will also provide a subset of headers returned by
the Foursquare API.

- `x-ratelimit-limit`
- `x-ratelimit-remaining`

## GET /foursquare/v2/venues/search?{?ll}

**Applies to all `/foursquare/` API calls.**

Direct pipe into foursquare thru our API. We add client_id and client_secret on our end, so omit those. Otherwise, reference https://developer.foursquare.com/docs/venues/search.html

+ Response 200 (application/json)

    + Body

            {
                "meta" : {
                    "code" : 200
                },
                "response" : {
                    "venues" : [
                        {
                            "id" : "4e5866bfa809655861178a30",
                            "name" : "Gymmy",
                            "contact" : {

                            },
                            "location" : {
                                "lat" : 45.42039738797339,
                                "lng" : -122.72638020026119,
                                "distance" : 17,
                                "cc" : "US",
                                "state" : "Oregon",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4bf58dd8d48988d175941735",
                                    "name" : "Gym \/ Fitness Center",
                                    "pluralName" : "Gyms or Fitness Centers",
                                    "shortName" : "Gym \/ Fitness",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/gym_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 3,
                                "usersCount" : 1,
                                "tipCount" : 0
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        },
                        {
                            "id" : "50c8ebdde4b04b42c3d7dd5b",
                            "name" : "Kruse Woods III",
                            "contact" : {

                            },
                            "location" : {
                                "address" : "5005 Meadows Rd",
                                "lat" : 45.41789010827635,
                                "lng" : -122.72907308404407,
                                "distance" : 350,
                                "postalCode" : "97035",
                                "cc" : "US",
                                "city" : "Lake Oswego",
                                "state" : "OR",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4bf58dd8d48988d130941735",
                                    "name" : "Building",
                                    "pluralName" : "Buildings",
                                    "shortName" : "Building",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/default_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 181,
                                "usersCount" : 10,
                                "tipCount" : 0
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        },
                        {
                            "id" : "4c06df62cf8c76b0e5303b65",
                            "name" : "Kruse Way Commons",
                            "contact" : {

                            },
                            "location" : {
                                "address" : "4933 Parkview Dr",
                                "lat" : 45.42068389699463,
                                "lng" : -122.72565128976458,
                                "distance" : 73,
                                "postalCode" : "97035",
                                "cc" : "US",
                                "city" : "Lake Oswego",
                                "state" : "OR",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4d954b06a243a5684965b473",
                                    "name" : "Residential Building (Apartment \/ Condo)",
                                    "pluralName" : "Residential Buildings (Apartments \/ Condos)",
                                    "shortName" : "Residential",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/apartment_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 285,
                                "usersCount" : 58,
                                "tipCount" : 1
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        },
                        {
                            "id" : "4bb3e846643cd13ae429395c",
                            "name" : "Westside Christian High School",
                            "contact" : {

                            },
                            "location" : {
                                "lat" : 45.42066711976636,
                                "lng" : -122.72392287911403,
                                "distance" : 206,
                                "postalCode" : "97035",
                                "cc" : "US",
                                "city" : "Lake Oswego",
                                "state" : "OR",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4bf58dd8d48988d13d941735",
                                    "name" : "High School",
                                    "pluralName" : "High Schools",
                                    "shortName" : "High School",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/school_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 161,
                                "usersCount" : 25,
                                "tipCount" : 1
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        },
                        {
                            "id" : "4e08dbc518a8382643bd66ff",
                            "name" : "4949 Meadows",
                            "contact" : {

                            },
                            "location" : {
                                "address" : "4949 Meadows Rd",
                                "lat" : 45.417897,
                                "lng" : -122.727492,
                                "distance" : 298,
                                "postalCode" : "97035",
                                "cc" : "US",
                                "city" : "Lake Oswego",
                                "state" : "OR",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4bf58dd8d48988d124941735",
                                    "name" : "Office",
                                    "pluralName" : "Offices",
                                    "shortName" : "Office",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/default_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 449,
                                "usersCount" : 20,
                                "tipCount" : 0
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        }
                    ],
                    "neighborhoods" : [

                    ],
                    "confident" : false
                }
            }


