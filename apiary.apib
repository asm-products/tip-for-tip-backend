FORMAT: 1A
HOST: https://api.tipfortip.com

# Tip for Tip API

Services all the data necessary for T4T client applicatinos.

- All requests that require a current user will return `401` if no user is [authenticated](#authentication).



# Group Authentication
Use Facebook as a user authentication/creation portal.

## GET /auth/facebook
Authenticate via Facebook. Starts the handshake process for the client with Facebook Oauth.
In the end, a user is redirected back to `/profile` unless a `redirectTo` param is provided.

- If the user does not yet have an account, one is created for them.
- If the user has an account but is not yet authenticated, they are logged in and their profile data is synced with their Facebook data.
- If the user has an account and is already authenticated, their profile data is synced with their Facebook data.
- If the user has an account by email but has not yet used this provider for authentication, TODO
- If a `redirectTo` param is provided, successful authentication redirects to this url.

+ Response 302


## GET /auth/logout
Logout. Clears the user's session and auth tokens.

+ Response 200




# Group Users
User related resources.

## GET /profile
Retrieve the current user's user, identity, and profile data.

+ Response 200 (application/json)

    + Body

            {
                id: 1,
                username: "1762fe11",
                first_name: "Bruce",
                last_name: "Chelmsford",
                email: "bruce@example.com",
                uuid: "1762fe10",
                timezone: -7,
                locale: "en_US",
                updated_at: "2014-04-27T18:45:23.000Z",
                identities: [
                    {
                        uid: "12345",
                        provider: "facebook",
                        token: "abcdefg12345",
                        token_expires_at: "2014-07-24T22:13:45.000-07:00"
                    }
                ]

            }

+ Response 401 (application/json)

    + Body

            {
                "status":"unauthorized"
            }




# Group Tips

## GET /tips/{tip_id}

View the details of an individual tip.

+ Parameters
    + tip_id (string) ... Id or uuid of the tip

- Requires a current user

+ Response 200
        {
            id: 1,
            uuid: "45673e9a26145957a0cdbf470f1e0700",
            subject: "Tempora vitae aspernatur nam quidem recusandae ratione possimus.",
            body: "Aut similique recusandae sequi dolor possimus. Lorem ipsem...",
            display_as: "anonymous",
            is_free: false
            is_compliment: false,
            send_at: "2014-06-14T00:00:26.000-07:00",
            created_at: "2014-06-13T00:00:26.000-07:00",
            updated_at: "2014-06-13T00:00:26.000-07:00",
            user: {
                id: 2,
                uuid: "f4773e96b76df671fbe90f7c48db5640",
                username: "BruceChelmsforde7a8da84",
                first_name: "Bruce",
                last_name: "Chelmsford",
                created_at: "2014-06-13T00:00:26.000-07:00",
                updated_at: "2014-06-13T00:00:26.000-07:00"
            },
            noun: {
                id: 1,
                uuid: "294bec143ab73b6822aeb5ebe2ac05e7",
                created_at: "2014-06-13T00:00:26.000-07:00",
                updated_at: "2014-06-13T00:00:26.000-07:00",
                type: "place"
            }
        }
+ Response 401 (application/json)
        If a valid authentication token or other method is not provided with the request.
+ Response 404 (application/json)
        If the tip was not found.

## POST /:noun_type/:noun_id/tips

- Requires a current user

Create a tip for a noun.

The current user will be assigned as the tipper. If the noun has not yet had a tip, the user will be set as the first tipper.

A successful response will return the same data as the `GET tips/:tip_id` request.

+ Parameters

    + noun_type (string)                ... The type of noun the created tip will be created for. May be one of the available noun types.
    + noun_id   (string)                ... The id of the noun to create the tip for. This parameter is optional. If left out, the other provided noun attributes will be used to find or create the noun.
    + subject (string)                  ... The tip subject line. A summary of the tip being given.
    + body (string)                     ... The body of the tip.
    + send_at (optional, timestamp or string) ... The time or named timeframe at which the tip should be sent. If the value is a parseable timestamp, it will be treated as an exact time to send the tip. Otherwise the value is expected to be one of a few available named timeframes: 'today', 'tomorrow', 'later this week', 'in a few weeks'. These strings are case insensitive but must be otherwise matched letter for letter. Randomness will be used to create a send_at time with from these values, so for example, 'tomorrow' will not create a send_at time that is precisely 24 hours from now. If ommitted or null, the tip will be sent immediately.

    + is_compliment (optional, boolean) ... A compliment tip does not require purchasing, but rather, is meant to add positivity in the app. Default: false
    + is_free (optional, boolean)       ... A "free tip" is a tip that can be purchased using reputation points. Default: false
    + display_as (optional, string)     ... How the tip submitter would like their identity displayed. Possible options: first_name, full_name, anonymous. Default: full_name
+ Request (application/json)

        {
            noun_type: "place",
            noun_id: 1,
            subject: "Tempora vitae aspernatur nam quidem recusandae ratione possimus.",
            body: "Aut similique recusandae sequi dolor possimus. Lorem ipsem...",
            is_compliment: false,
            is_free: false,
            display_as: "anonymous",
            send_at: "tomorrow"
        }
+ Response 201 (application/json)

        {
            id: 1,
            uuid: "45673e9a26145957a0cdbf470f1e0700",
            subject: "Tempora vitae aspernatur nam quidem recusandae ratione possimus.",
            body: "Aut similique recusandae sequi dolor possimus. Lorem ipsem...",
            display_as: "anonymous",
            is_free: false
            is_compliment: false,
            send_at: "2014-06-14T00:00:26.000-07:00",
            created_at: "2014-06-13T00:00:26.000-07:00",
            updated_at: "2014-06-13T00:00:26.000-07:00",
            user: {
                id: 2,
                uuid: "f4773e96b76df671fbe90f7c48db5640",
                username: "BruceChelmsforde7a8da84",
                first_name: "Bruce",
                last_name: "Chelmsford",
                created_at: "2014-06-13T00:00:26.000-07:00",
                updated_at: "2014-06-13T00:00:26.000-07:00"
            },
            noun: {
                id: 1,
                uuid: "294bec143ab73b6822aeb5ebe2ac05e7",
                type: "place"
                name:"Starbucks",
                latitude:-36.4234,
                longitude:-88.5432,
                created_at: "2014-06-13T00:00:26.000-07:00",
                updated_at: "2014-06-13T00:00:26.000-07:00",
            }
        }
+ Response 401 (application/json)
        If a valid authentication token or other method is not provided with the request.
+ Response 404 (application/json)
        If the noun was not found.

<!--
## POST /:noun_type/tips

Create a tip for a noun and create the noun in the process. In the example case of the creation
of a tip for a thing that a user has named, but could not find in a search, the valid attributes
for the noun should be passed as a nested object.

Currently only an option for creating Thing nouns.

A successful response will return the same data as the `GET tips/:tip_id` request.

+ Parameters
    + noun_type (string)                ... The type of noun the created tip will be created for. May be one of the available noun types.
    + subject (string)                  ... The tip subject line. A summary of the tip being given.
    + body (string)                     ... The body of the tip.
    + send_at (optional, timestamp or string) ... The time or named timeframe at which the tip should be sent. If the value is a parseable timestamp, it will be treated as an exact time to send the tip. Otherwise the value is expected to be one of a few available named timeframes: 'today', 'tomorrow', 'later this week', 'in a few weeks'. These strings are case insensitive but must be otherwise matched letter for letter. Randomness will be used to create a send_at time with from these values, so for example, 'tomorrow' will not create a send_at time that is precisely 24 hours from now. If ommitted or null, the tip will be sent immediately.

    + is_compliment (optional, boolean) ... A compliment tip does not require purchasing, but rather, is meant to add positivity in the app. Default: false
    + is_free (optional, boolean)       ... A "free tip" is a tip that can be purchased using reputation points. Default: false
    + display_as (optional, string)     ... How the tip submitter would like their identity displayed. Possible options: first_name, full_name, anonymous. Default: full_name

    + noun (object)                    ... The noun to create. The parameters for this nested object are the same as the api request to create the noun directly.
+ Request (application/json)
    + Body
            {
                noun_type: "place",
                noun_id: 1,
                subject: "Tempora vitae aspernatur nam quidem recusandae ratione possimus.",
                body: "Aut similique recusandae sequi dolor possimus. Lorem ipsem...",
                is_compliment: false,
                is_free: false,
                display_as: "anonymous",
                send_at: "tomorrow",

                noun: {
                    noun_type: "thing",
                    name: "Tip for Tip"
                }
            }
+ Response 201 (application/json)
        {
            id: 1,
            uuid: "45673e9a26145957a0cdbf470f1e0700",
            subject: "Tempora vitae aspernatur nam quidem recusandae ratione possimus.",
            body: "Aut similique recusandae sequi dolor possimus. Lorem ipsem...",
            display_as: "anonymous",
            is_free: false
            is_compliment: false,
            send_at: "2014-06-14T00:00:26.000-07:00",
            created_at: "2014-06-13T00:00:26.000-07:00",
            updated_at: "2014-06-13T00:00:26.000-07:00",
            user: {
                id: 2,
                uuid: "f4773e96b76df671fbe90f7c48db5640",
                username: "BruceChelmsforde7a8da84",
                first_name: "Bruce",
                last_name: "Chelmsford",
                created_at: "2014-06-13T00:00:26.000-07:00",
                updated_at: "2014-06-13T00:00:26.000-07:00"
            },
            noun: {
                id: 1,
                uuid: "1234567adsf73b6822aeb5ebe2ac05e7",
                type: "thing"
                name: "Tip for Tip"
                created_at: "2014-06-13T00:00:26.000-07:00",
                updated_at: "2014-06-13T00:00:26.000-07:00",
            }
        }
+ Response 401
+ Response 404
+ Response 422
    + Body

            {
                "errors": [
                    {
                        "resource": "nouns/thing",
                        "resource_id": null,
                        "parameter": "name",
                        "message": "is invalid.",
                        "code": "invalid"
                    },
                    {
                        "resource": "tip",
                        "resource_id": null,
                        "parameter": "subject",
                        "message": "is invalid.",
                        "code": "invalid"
                    }
                ]
            }
 -->

## POST /tips/{tip_id}/purchases/itunes

Purchase a tip for the current user. Expects that the purchase itself has already taken place
on the iTunes IAP service. Transaction data from that service should be provided to this endpoint
where it will be verified with the service and recorded as a purchase of the tip for the user.
This endpoint is service specific to allow each service to use its different parameter footprint
and response values, depending on the needs and provisions of that service.

The response body of a successful request provides the details fo the created purchase resource as
well as the same details of the tip resource that are returned by the `GET /tips/{tip_id}` request.

The receipt data contains a number of additional attributes that are saved to the purchase record.
iTunes receipt format information can be found at

- [https://developer.apple.com/library/ios/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html#//apple_ref/doc/uid/TP40010573-CH104-SW1](https://developer.apple.com/library/ios/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html#//apple_ref/doc/uid/TP40010573-CH104-SW1)
- [https://developer.apple.com/library/ios/releasenotes/General/ValidateAppStoreReceipt/Chapters/ReceiptFields.html#//apple_ref/doc/uid/TP40010573-CH106-SW3](https://developer.apple.com/library/ios/releasenotes/General/ValidateAppStoreReceipt/Chapters/ReceiptFields.html#//apple_ref/doc/uid/TP40010573-CH106-SW3)

+ Parameters

    + tip_id (string) ... The id or uuid of the tip being purchased.
+ Request (application/json)

        {
            receipt_data: "<encrypted receipt data>=",
            transaction_id: 'abc123'
        }
+ Response 201 (application/json)

        {
            "id": "12345",
            "created_at": "2014-05-25T16:45:49Z",
            "updated_at": "2014-05-25T16:45:49Z",
            "tip": {
                "TODO": "TODO"
            }
        }
+ Response 401 (application/json)

        If a valid authentication token or other method is not provided with the request.
+ Response 404 (application/json)

        If the tip was not found.
+ Response 400
+ Response 422

## POST /tips/{tip_id}/purchase/google

Purchase a tip for the current user. Expects that the purchase itself has already taken place
on the Google IAP service. Transaction data from that service should be provided to this endpoint
where it will be verified with the service and recorded as a purchase of the tip for the user.
This endpoint is service specific to allow each service to use its different parameter footprint
and response values, depending on the needs and provisions of that service.

Transaction values must be sent in cent values.

The response body of a successful request provides the details fo the created purchase resource as
well as the same details of the tip resource that are returned by the `GET /tips/{tip_id}` request.

The receipt data contains a number of additional attributes that are saved to the purchase record.

TODO: should we remove the "transaction_" from the request params?

TODO

+ Parameters

    + tip_id (string) ... The id or uuid of the tip being purchased.
+ Request (application/json)

        {
            receipt_data: "<encrypted receipt data>=",
            transaction_id: 'abc123',
            transaction_value: 99,
            transaction_currency: 'USD',
            transaction_timestamp: '2014-05-25T16:45:49Z'
        }
+ Response 201 (application/json)

        {
            "id": "12345",
            "created_at": "2014-05-25T16:45:49Z",
            "updated_at": "2014-05-25T16:45:49Z",
            "tip": {
                "TODO": "TODO"
            }
        }
+ Response 401 (application/json)
        If a valid authentication token or other method is not provided with the request.
+ Response 404 (application/json)
        If the tip was not found.
+ Response 400
+ Response 422





# Group Nouns

## GET /nouns/places/:place_id
Get a place by its id.

The associated data returned includes limited perk and tip data, paginated when
necessary.

<!--
    creates the place if not found
    returns place data
    returns list of perks
    recent tips (paginated, first page)
    list of subscriptions/perks
-->
<!--
Questions:
    paginate perks?

Todos:
    paginate tips
-->

+ Response 200

    + Body

            {
                "id":7,
                "uuid":"6d085313e43a9d420999faaf87a83be9",
                "name":"Starbucks",
                "latitude":-36.4234,
                "longitude":-88.5432,
                "created_at":"2014-05-19T02:00:04.000-07:00",
                "updated_at":"2014-05-19T02:00:04.000-07:00",

                "perks_count":1,
                "perks": [

                ],

                "tips_count":3,
                "tips": [

                ]
            }
+ Response 401
+ Response 404

## GET /nouns/places/foursquare/:foursquare_id
Get a place by its Foursquare id. The data returned is the T4T data on the place,
not necessarily the Foursquare data. The response body is the same as the
`GET /nouns/places/:place_id` request.

A key difference is that if a place is requested using foursquare id but is not
found locally, a record is created for it.

+ Response 200

    + Body

            {
                "id":7,
                "uuid":"6d085313e43a9d420999faaf87a83be9",
                "name":"Starbucks",
                "latitude":-36.4234,
                "longitude":-88.5432,
                "created_at":"2014-05-19T02:00:04.000-07:00",
                "updated_at":"2014-05-19T02:00:04.000-07:00",

                "perks_count":1,
                "perks": [
                    <!-- todo -->
                ],

                "tips_count":3,
                "tips": [
                    <!-- todo -->
                ]
            }
+ Response 401
+ Response 404

## GET /nouns/things{?q}
Search for a thing by query.

TODO: Pagination. Currently results will be limited to 20.

Expected responses:

- `200 OK` if results are found.
- `204 NO CONTENT` if no results are found.
- `401 UNAUTHORIZED` if there is no currently autheticated user.

+ Parameters
    + q (required, string) ... The string to search for.
+ Response 200
    + Body

            [
                {
                    id: 1,
                    type: 'thing'
                    uuid: "1234567adsf73b6822aeb5ebe2ac05e7",
                    name: "Tip for Tip"
                    created_at: "2014-06-13T00:00:26.000-07:00",
                    updated_at: "2014-06-13T00:00:26.000-07:00",
                }
            ]
+ Response 204
+ Response 401

## GET /nouns/things/:thing_id
Get a thing by its id.

The associated data returned includes tip data, paginated when necessary.

+ Response 200

    + Body

            {
                "id":77,
                "uuid":"1234513e43a9d420999faaf87a83be9",
                "name":"Tip for Tip",
                "created_at":"2014-05-19T02:00:04.000-07:00",
                "updated_at":"2014-05-19T02:00:04.000-07:00",

                "tips_count":3,
                "tips": [
                    <!-- todo -->
                ]
            }
+ Response 401
+ Response 404

## POST /nouns/things
Create a Thing noun.

In a successful response, the returned data is the same as the GET request for the
created resource.

+ Parameters
    + name (string) ... The name of the thing to create.
+ Request
    + Body
            {
                name: "Tip for Tip"
            }
+ Response 201

        {
            id: 1,
            uuid: "1234567adsf73b6822aeb5ebe2ac05e7",
            name: "Tip for Tip"
            created_at: "2014-06-13T00:00:26.000-07:00",
            updated_at: "2014-06-13T00:00:26.000-07:00",
        }
+ Response 401
+ Response 404
+ Response 422
    + Body

            {
                "errors": [
                    {
                        "resource": "nouns/thing",
                        "resource_id": null,
                        "parameter": "name",
                        "message": "is invalid.",
                        "code": "invalid"
                    }
                ]
            }




# Group Perks

## Perk [/perks/:perk_id]

A single perk object. Perks are readable by any user, but are only editable or
removable by a user with permissions to manage a partner/subscription's perks.

+ Parameters
    + perk_id (string or integer) ... Id or uuid of the resource.

+ Model (application/json)

    JSON representation of Perk resource.

    + Body

            {
                "id": 99,
                "title": "Free cup of coffee!",
                "subscription_id": 33,
                "partner": {
                    "id": 88,
                    "guid": "axd85313e43a9d330999faaf87a3dbe9",
                    "primary_user_id": 55,

                    <!-- todo -->

                    "created_at":"2014-05-19T02:00:04.000-07:00",
                    "updated_at":"2014-05-19T02:00:04.000-07:00"
                }
                "created_at":"2014-05-19T02:00:04.000-07:00",
                "updated_at":"2014-05-19T02:00:04.000-07:00"
            }

### Retrieve a Single Perk [GET]

Retreive information about a single perk.

Expected responses:

- `200 OK` if the resource was found.
- `404 Not Found` if the resource was not found using the provided id.

+ Response 200
    [Perk][]
+ Response 404

## Edit a Perk [PATCH]

Any single attributes can be sent or ommitted only the attributes sent
will be updated.

Expected responses:

- `200 OK` if the resource was found.
- `401 Unauthorized` if the current user is not the primary user on the partnership owning
    the perk or in any other way does not have a role with permission to
    update the partnership's perks.
- `404 Not Found` if the resource was not found using the provided id.
- `422 Unprocessible Entity` if any provided attribute values are invalid. Structured errors will be
    provided in the response body.

+ Request (application/json)
    + Body
            {
                title: "2 Free cups of coffee!"
            }
+ Response 200
    [Perk][]
+ Response 401
+ Response 404
+ Response 422
    + Body

            {
                "errors": [
                    {
                        "resource": "Perk",
                        "resource_id": 99,
                        "parameter": "title",
                        "message": "is invalid.",
                        "code": "invalid"
                    }
                ]
            }

### Remove a Perk [DELETE]
Remove a perk.

Expected Responses:

- `204 No Content` if the resource was successfully removed.
- `401 Unauthorized` if the current user is not the primary user on the partnership owning
    the perk or in any other way does not have a role with permission to
    update the partnership's perks.
- `404 Not Found` if the resource was not found using the provided id.

+ Response 204
+ Response 401
+ Response 404



## Perks Collection [/subscription/:subscription_id/perks]
Collection of all perks in the specified subscription.

### List All Perks [GET]

<!--
    TODO: We want the ability to list perks by subscription, partner, user
    as well as by noun (/nouns/places/:place_id/perks)
 -->

+ Response 200
    <!-- todo -->
+ Response 404

## Create a Perk [POST]
Create a perk. Perks must be added to a subscription, and so they are RESTfully
nested within the subscription namespace. The successful response body provides
the same body as the `GET /perks/:perk_id` request.

Expected Responses:

- `200 OK` if the subscription resource was found.
- `401 Unauthorized` if the current user is not the primary user on the partnership owning
    the subscription or in any other way does not have a role with permission to
    update the partnership's perks.
- `404 Not Found` if the resource was not found using the provided id.
- `422 Unprocessible Entity` if any provided attribute values are invalid. Structured errors will be
    provided in the response body.

+ Request (application/json)
        {
            title: "2 Free cups of coffee!"
        }

+ Response 201
    [Perk][]
+ Response 401
+ Response 404
+ Response 422
        {
            "errors": [
                {
                    "resource": "Perk",
                    "resource_id": 99,
                    "parameter": "title",
                    "message": "is invalid.",
                    "code": "invalid"
                }
            ]
        }





# Group Partners

## Partner [/partner/:partner_id]

A Partner resource. The partner has users and a primary user associated to
as well as subscriptions and a subscriptions's perks. Viewing partner data is also
limited to users assigned to the partner and the primary partner.

+ Parameters
    + perk_id (string or integer) ... Id or uuid of the resource.

+ Model (application/json)

    <!--
    Questions:
        paginate perks?
        how much noun data to provide?
        how much sub and partner data to provide?
    -->

    JSON representation of a Partner resource.

    + Body

            {
                "id": 33,
                "primary_user_id": 11,
                "user_ids": [ 12, 13 ],

                <!-- todo -->

                "subscriptions": [
                    {
                        "id": 44,
                        "noun": {
                            "id": 7,
                            "guid": "6d085313e43a9d420999faaf87a83be9",
                            "type": "place",
                            "name": "Starbucks",
                            "created_at":"2014-05-19T02:00:04.000-07:00",
                            "updated_at":"2014-05-19T02:00:04.000-07:00"
                        },
                        "perks": [
                            {
                                "id": 99,
                                "title": "Free cup of coffee!",
                                "created_at":"2014-05-19T02:00:04.000-07:00",
                                "updated_at":"2014-05-19T02:00:04.000-07:00"
                            }
                        ]
                        "created_at":"2014-05-19T02:00:04.000-07:00",
                        "updated_at":"2014-05-19T02:00:04.000-07:00"
                    }
                ],

                "created_at":"2014-05-19T02:00:04.000-07:00",
                "updated_at":"2014-05-19T02:00:04.000-07:00"
            }

### Retrieve a Single Partner [GET]

Retrieve a partner's set of data. Includes the subscription's associated
noun, perks, and partnership.

Expected responses:

- `200 OK` if the resource was found.
- `401 Unauthorized` if the user is not a member of the partner resource.
- `404 Not Found` if the resource was not found using the provided id.

+ Response 200
    [Partner][]
+ Response 401
+ Response 404




# Group Foursquare Proxy

Provides a proxy for the Foursquare API, attaching the appropriate api keys
as authorization. Responses will also provide a subset of headers returned by
the Foursquare API.

- `x-ratelimit-limit`
- `x-ratelimit-remaining`

## GET /foursquare/v2/venues/search?{?ll}

**Applies to all `/foursquare/` API calls.**

Direct pipe into foursquare thru our API. We add client_id and client_secret on our end, so omit those. Otherwise, reference https://developer.foursquare.com/docs/venues/search.html

+ Response 200 (application/json)

    + Body

            {
                "meta" : {
                    "code" : 200
                },
                "response" : {
                    "venues" : [
                        {
                            "id" : "4e5866bfa809655861178a30",
                            "name" : "Gymmy",
                            "contact" : {

                            },
                            "location" : {
                                "lat" : 45.42039738797339,
                                "lng" : -122.72638020026119,
                                "distance" : 17,
                                "cc" : "US",
                                "state" : "Oregon",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4bf58dd8d48988d175941735",
                                    "name" : "Gym \/ Fitness Center",
                                    "pluralName" : "Gyms or Fitness Centers",
                                    "shortName" : "Gym \/ Fitness",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/gym_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 3,
                                "usersCount" : 1,
                                "tipCount" : 0
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        },
                        {
                            "id" : "50c8ebdde4b04b42c3d7dd5b",
                            "name" : "Kruse Woods III",
                            "contact" : {

                            },
                            "location" : {
                                "address" : "5005 Meadows Rd",
                                "lat" : 45.41789010827635,
                                "lng" : -122.72907308404407,
                                "distance" : 350,
                                "postalCode" : "97035",
                                "cc" : "US",
                                "city" : "Lake Oswego",
                                "state" : "OR",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4bf58dd8d48988d130941735",
                                    "name" : "Building",
                                    "pluralName" : "Buildings",
                                    "shortName" : "Building",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/default_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 181,
                                "usersCount" : 10,
                                "tipCount" : 0
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        },
                        {
                            "id" : "4c06df62cf8c76b0e5303b65",
                            "name" : "Kruse Way Commons",
                            "contact" : {

                            },
                            "location" : {
                                "address" : "4933 Parkview Dr",
                                "lat" : 45.42068389699463,
                                "lng" : -122.72565128976458,
                                "distance" : 73,
                                "postalCode" : "97035",
                                "cc" : "US",
                                "city" : "Lake Oswego",
                                "state" : "OR",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4d954b06a243a5684965b473",
                                    "name" : "Residential Building (Apartment \/ Condo)",
                                    "pluralName" : "Residential Buildings (Apartments \/ Condos)",
                                    "shortName" : "Residential",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/apartment_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 285,
                                "usersCount" : 58,
                                "tipCount" : 1
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        },
                        {
                            "id" : "4bb3e846643cd13ae429395c",
                            "name" : "Westside Christian High School",
                            "contact" : {

                            },
                            "location" : {
                                "lat" : 45.42066711976636,
                                "lng" : -122.72392287911403,
                                "distance" : 206,
                                "postalCode" : "97035",
                                "cc" : "US",
                                "city" : "Lake Oswego",
                                "state" : "OR",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4bf58dd8d48988d13d941735",
                                    "name" : "High School",
                                    "pluralName" : "High Schools",
                                    "shortName" : "High School",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/school_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 161,
                                "usersCount" : 25,
                                "tipCount" : 1
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        },
                        {
                            "id" : "4e08dbc518a8382643bd66ff",
                            "name" : "4949 Meadows",
                            "contact" : {

                            },
                            "location" : {
                                "address" : "4949 Meadows Rd",
                                "lat" : 45.417897,
                                "lng" : -122.727492,
                                "distance" : 298,
                                "postalCode" : "97035",
                                "cc" : "US",
                                "city" : "Lake Oswego",
                                "state" : "OR",
                                "country" : "United States"
                            },
                            "categories" : [
                                {
                                    "id" : "4bf58dd8d48988d124941735",
                                    "name" : "Office",
                                    "pluralName" : "Offices",
                                    "shortName" : "Office",
                                    "icon" : {
                                        "prefix" : "https:\/\/ss1.4sqi.net\/img\/categories_v2\/building\/default_",
                                        "suffix" : ".png"
                                    },
                                    "primary" : true
                                }
                            ],
                            "verified" : false,
                            "stats" : {
                                "checkinsCount" : 449,
                                "usersCount" : 20,
                                "tipCount" : 0
                            },
                            "specials" : {
                                "count" : 0,
                                "items" : [

                                ]
                            },
                            "hereNow" : {
                                "count" : 0,
                                "summary" : "0 people here",
                                "groups" : [

                                ]
                            },
                            "referralId" : "v-1398957965"
                        }
                    ],
                    "neighborhoods" : [

                    ],
                    "confident" : false
                }
            }






